---
description: MSW(Mock Service Worker) 사용 가이드 및 프로젝트 내 적용 규칙
globs:
alwaysApply: false
---

# MSW(Mock Service Worker) 사용 가이드

> 🧪 **이 가이드는 JECT-5-FE 프로젝트에서 MSW를 활용한 API Mocking의 일관된 적용을 위한 규칙을 정의합니다.**

## 1. 디렉토리 및 파일 구조

- **모든 MSW 관련 코드는 `service/app/src/mocks/` 디렉토리에 위치시킵니다.**
  - `handlers/`: 엔드포인트별 mock handler 파일을 분리하여 작성합니다.
    - 예시: `service/app/src/mocks/handlers/user.ts`
  - `handlers.ts`: 모든 handler를 통합하여 export합니다.
  - `browser.ts`: 브라우저 환경에서 MSW를 초기화하는 worker를 설정합니다.
  - `server.ts`: (필요 시) Node 환경에서의 MSW 설정을 담당합니다.
  - `mswComponent.tsx`: (필요 시) MSW 관련 React 컴포넌트 정의에 사용합니다.

## 2. 핸들러 작성 규칙

- **핸들러는 엔드포인트/도메인별로 파일을 분리하여 작성합니다.**
- 예시: `user` 관련 핸들러는 `handlers/user.ts`에 작성
- 각 핸들러 파일에서는 `rest.get`, `rest.post` 등 MSW의 메서드를 사용해 mock API를 정의합니다.
- 모든 핸들러는 `handlers/index.ts`에서 한 번에 import/export 하여, `handlers.ts`에서 통합 관리합니다.

## 3. worker 설정

- **브라우저 환경에서의 worker는 `browser.ts`에서 `setupWorker(...handlers)`로 생성 및 export합니다.**
  - 예시:
    ```ts
    import { setupWorker } from 'msw/browser';
    import { handlers } from './handlers';
    export const worker = setupWorker(...handlers);
    ```

## 4. 적용 및 사용 규칙

- **개발 환경에서만 MSW가 활성화되도록 설정합니다.**
- 실제 서비스 배포 시에는 MSW가 동작하지 않도록 분기 처리합니다.
- MSW를 통한 Mocking은 실제 API 개발 전, 또는 테스트/스토리북 환경에서만 사용합니다.
- MSW 관련 코드에는 실제 API URL/응답 구조와 최대한 동일하게 작성하여, 실제 API 교체 시 코드 변경이 최소화되도록 합니다.

## 5. 네이밍 및 코드 컨벤션

- 파일명, 변수명 등은 프로젝트의 네이밍 컨벤션과 동일하게 적용합니다.
  - 파일명: 소문자 camelCase
  - 변수/함수: camelCase
  - 상수: UPPER_SNAKE_CASE

## 6. 금지 및 주의사항

- MSW 핸들러 내에서 실제 네트워크 요청을 발생시키지 않습니다.
- 핸들러 내 mock 데이터는 테스트 목적에 맞게 최소한으로 작성합니다.
- MSW 관련 코드는 서비스 코드와 분리하여, 실제 서비스 번들에 포함되지 않도록 주의합니다.


---
description: When a user asks where a file will be saved/created
globs: 
alwaysApply: false
---
---
description: service/app 폴더구조 컨벤션
globs: 
alwaysApply: false
---

# 프로젝트 폴더구조 컨벤션

> 🏗️ **프론트엔드 코드 구조 및 파일 배치 규칙 (Feature-Sliced Design 기반)**

## 🎯 목적
이 문서는 우리 프로젝트의 프론트엔드 코드를 일관되고 예측 가능하게 유지하기 위한 폴더구조 컨벤션을 정의합니다.
구현 방법으로는 Feature-Sliced Design(FSD)을 경량화한 아키텍처를 채택하고 있습니다.
새로운 코드를 작성하거나 구조를 변경할 때 이 가이드를 따릅니다.
- 이 가이드는 `shared/service/*` 패키지에만 적용됩니다

## 🔗 핵심 원칙: 레이어 의존성
FSD의 가장 중요한 규칙은 **단방향 의존성**입니다. 상위 레이어는 자신보다 하위 레이어의 코드만 가져와(import) 사용할 수 있습니다.

### 레이어 구조 (3단계)
```
app (Next.js 14 App Router 컨벤션 - 라우팅 및 페이지)
 ↓
entities 
 ↓
shared (최하위 - 의존성 없음)
```

### 의존성 규칙
- ✅ **올바른 사용**: app 레이어의 컴포넌트가 entities나 shared의 코드를 가져와 사용
- ❌ **잘못된 사용**: entities 레이어의 코드가 app의 코드를 가져와 사용

## 📋 파일/폴더 배치 규칙
새로운 파일을 만들 때, 반드시 아래 순서(**RULE #1 → #3**)대로 질문에 답하여 위치를 결정합니다.

### RULE #1: 특정 비즈니스와 전혀 관련 없는 범용 코드인가?
**질문**: 모든 곳에서 쓰이는 Button 컴포넌트, Input 컴포넌트, formatDate 같은 유틸리티 함수, axios 기본 설정 등인가?

**➡️ 예**: `shared` 레이어로 이동 (최하위)
- UI 컴포넌트: `src/shared/ui/`
- 유틸리티/공용 훅: `src/shared/lib/`
- API 설정: `src/shared/api/`
- 공용 타입: `src/shared/types/`

**➡️ 아니오**: 다음 규칙으로 넘어감

### RULE #2: 특정 비즈니스 데이터(모델)와 직접적으로 관련된 코드인가?
**질문**: '사용자', '상품', '게시글'과 같이 명확한 데이터 단위와 관련된 UI, API, 로직 등인가?

**➡️ 예**: `entities` 레이어로 이동
- 예시: UserCard 컴포넌트, useUserQuery() 훅, Post 타입 등
- UI 컴포넌트: `src/entities/user/ui/`
- custom hook, 비즈니스 로직과 관련: `src/entities/user/model/`
- api 요청 + react query 사용 - `src/entities/user/api/`

**➡️ 아니오**: 다음 규칙으로 넘어감

### RULE #3: 페이지, 라우팅, 전역 설정과 관련된 코드인가?
**질문**: Next.js 페이지 컴포넌트, 레이아웃, 전역 설정, 라우팅과 관련된 코드인가?

**➡️ 예**: `app` 레이어로 이동 (Next.js 14 App Router 컨벤션)
- Next.js App Router 구조 따름: `src/app/` 
- 페이지: `src/app/page.tsx`, `src/app/about/page.tsx`
- 레이아웃: `src/app/layout.tsx`, `src/app/dashboard/layout.tsx`
- 전역 설정: `src/app/globals.css`, `src/app/providers.tsx`

## 📁 폴더 구조 예시
```
src/
├── app/                           # Next.js 14 App Router 컨벤션
│   ├── layout.tsx                 # Root layout
│   ├── page.tsx                   # Home page
│   ├── globals.css                # Global styles
│   ├── about/
│   │   └── page.tsx               # About page
│   └── user/
│       └── [id]/
│           └── page.tsx           # Dynamic user page
├── entities/
│   └── user/
│       ├── ui/ 리액트 컴포넌트
│       │   └── UserAvatar.tsx     # 여러 페이지에서 사용될 수 있는 User 아바타
│       └── model/ 비즈니스 로직과 관련된 파일
│           └── useUserQuery.ts
│       └── api/ api요청과 관련된 파일
│           └── getUser.ts          
│           lib/ 자투리 파일
│           └── utils.ts

└── shared/
    ├── types/
    └── utils/
        └── formatDate.ts
```

## 💬 AI 가이드: 대화형 파일 배치 도우미
사용자가 파일/폴더 배치에 대해 질문하면, 아래 순서대로 질문하여 최적의 위치를 함께 찾아갑니다.

### 질문 프로세스
1. **파일/컴포넌트 설명 요청**
   - "이 파일/컴포넌트가 어떤 기능을 하는지 설명해 주세요"
   - "어디서 사용될 예정인가요?"

2. **RULE #1 확인 질문**
   - "이 코드가 특정 비즈니스 로직과 관계없이 프로젝트 어디서든 재사용될 수 있나요?"
   - "Button, Input, formatDate 같은 범용적인 코드인가요?"
   - **YES** → `shared` 레이어 제안 및 세부 위치 안내

3. **RULE #2 확인 질문**
   - "이 코드가 특정한 데이터 모델(사용자, 상품, 게시글 등)과 직접 연관되어 있나요?"
   - "여러 페이지에서 동일한 데이터를 다루기 위해 사용되나요?"
   - **YES** → `entities` 레이어 제안 및 적절한 도메인 폴더 안내

4. **RULE #3 확인 질문**
   - "이 코드가 Next.js 페이지, 레이아웃, 라우팅과 관련되어 있나요?"
   - "특정 URL 경로에 대응하는 페이지 컴포넌트인가요?"
   - "앱 전체의 설정이나 전역 상태와 관련되어 있나요?"

5. **적절한 파일명 추천**
   - 위치가 결정된 후, 해당 레이어와 폴더에 적합한 구체적인 파일명을 제안
   - @conventions.mdc 파일의 파일명 규칙을 참고하여 추천하기
   - 프로젝트의 네이밍 컨벤션(camelCase)을 준수하여 추천
   - 파일의 역할과 목적이 명확히 드러나는 이름 제안
   - 예시: "src/entities/user/ui/userProfileCard.tsx", "src/shared/lib/formatDate.ts"



### 질문 예시
```
사용자: "UserProfileCard 컴포넌트를 어디에 둘까요?"

AI: "UserProfileCard 컴포넌트에 대해 몇 가지 질문드릴게요!

1. 이 컴포넌트가 어떤 기능을 하나요? 사용자 정보를 보여주는 카드인가요?

2. 프로젝트 어디서든 재사용될 수 있는 범용 카드 컴포넌트인가요?

3. 사용자 데이터를 직접 다루는 컴포넌트인가요? 여러 페이지에서 사용되나요?"
```

### AI 응답 가이드라인
- **단계별 질문**: 한 번에 모든 질문을 하지 말고, 답변에 따라 다음 질문으로 진행
- **구체적 예시 제공**: 각 레이어에 적합한 파일들의 예시를 들어 설명
- **최종 제안**: 질문을 통해 파악한 정보를 바탕으로 구체적인 폴더 경로 제안
- **대안 제시**: 애매한 경우 여러 옵션과 각각의 장단점 설명

## ⚠️ 중요 원칙
1. **의존성 방향 준수**: 상위 레이어 → 하위 레이어만 가능
2. **3단계 질문 순서 준수**: RULE #1부터 순차적으로 확인  
3. **Next.js 14 App Router 컨벤션 준수**: app 폴더는 Next.js 표준 구조 따름
4. **명확한 책임 분리**: 각 레이어의 역할에 맞는 코드만 배치
5. **일관성 유지**: 팀 전체가 동일한 기준으로 판단
6. **대화형 접근**: 사용자와 질문을 통해 최적의 위치를 함께 찾기






